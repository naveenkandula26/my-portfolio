{
  "files": {
      "public/index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n  <title>File Management App</title>\n  <script src=\"https://cdn.jsdelivr.net/npm/react@18/umd/react.development.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/react-dom@18/umd/react-dom.development.js\"></script>\n  <script src=\"https://cdn.tailwindcss.com\"></script>\n  <script type=\"module\" src=\"/src/index.tsx\"></script>\n</head>\n<body>\n  <div id=\"root\"></div>\n</body>\n</html>",
          "src/index.tsx": "// Main entry point for the React application\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n",
	      "src/App.tsx": "// Main App component with routing and theme context\nimport React, { useState } from 'react';\nimport { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\nimport { ThemeProvider } from './contexts/ThemeContext';\nimport { AuthProvider, useAuth } from './contexts/AuthContext';\nimport Login from './components/auth/Login';\nimport OTPInput from './components/auth/OTPInput';\nimport FileDashboard from './components/files/FileDashboard';\nimport Navbar from './components/layout/Navbar';\nimport ProtectedRoute from './components/auth/ProtectedRoute';\n\nconst App: React.FC = () => {\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeProvider value={{ theme, toggleTheme }}>\n      <AuthProvider>\n        <div className={`${theme === 'dark' ? 'dark' : ''} min-h-screen bg-white dark:bg-gray-900 transition-colors duration-300`}>\n          <BrowserRouter>\n            <Navbar />\n            <Routes>\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/otp\" element={<OTPInput />} />\n              <Route\n                path=\"/dashboard\"\n                element={\n                  <ProtectedRoute>\n                    <FileDashboard />\n                  </ProtectedRoute>\n                }\n              />\n              <Route path=\"/\" element={<Navigate to=\"/login\" />} />\n            </Routes>\n          </BrowserRouter>\n        </div>\n      </AuthProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n",
	          "src/index.css": "/* Global styles with Tailwind and custom theme variables */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --primary-orange: #f97316;\n  --primary-orange-dark: #ea580c;\n  --background-light: #ffffff;\n  --background-dark: #111827;\n  --text-light: #1f2937;\n  --text-dark: #f3f4f6;\n}\n\n.dark {\n  background-color: var(--background-dark);\n  color: var(--text-dark);\n}\n\n.card {\n  @apply bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4 transition-transform hover:scale-105;\n}\n\n.btn-primary {\n  @apply bg-[var(--primary-orange)] hover:bg-[var(--primary-orange-dark)] text-white font-semibold py-2 px-4 rounded-lg transition-colors;\n}\n",
		      "src/contexts/ThemeContext.tsx": "// Theme context for dark/light mode toggle\nimport React, { createContext, useContext } from 'react';\n\ninterface ThemeContextType {\n  theme: 'light' | 'dark';\n  toggleTheme: () => void;\n}\n\nexport const ThemeContext = createContext<ThemeContextType>({\n  theme: 'light',\n  toggleTheme: () => {},\n});\n\nexport const ThemeProvider = ThemeContext.Provider;\n\nexport const useTheme = () => useContext(ThemeContext);\n",
		          "src/contexts/AuthContext.tsx": "// Authentication context for Firebase\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithPopup, GoogleAuthProvider, signInWithPhoneNumber, RecaptchaVerifier } from 'firebase/auth';\n\nconst firebaseConfig = {\n  // Placeholder: Replace with your Firebase config\n  apiKey: 'YOUR_API_KEY',\n  authDomain: 'YOUR_AUTH_DOMAIN',\n  projectId: 'YOUR_PROJECT_ID',\n  storageBucket: 'YOUR_STORAGE_BUCKET',\n  messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',\n  appId: 'YOUR_APP_ID',\n};\n\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\n\ninterface AuthContextType {\n  user: any;\n  signInWithGoogle: () => Promise<void>;\n  signInWithPhone: (phone: string) => Promise<void>;\n  verifyOTP: (code: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nexport const AuthContext = createContext<AuthContextType>({\n  user: null,\n  signInWithGoogle: async () => {},\n  signInWithPhone: async () => {},\n  verifyOTP: async () => {},\n  logout: async () => {},\n});\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<any>(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      setUser(user);\n    });\n    return () => unsubscribe();\n  }, []);\n\n  const signInWithGoogle = async () => {\n    const provider = new GoogleAuthProvider();\n    const result = await signInWithPopup(auth, provider);\n    setUser(result.user);\n  };\n\n  const signInWithPhone = async (phone: string) => {\n    const recaptcha = new RecaptchaVerifier('recaptcha-container', {}, auth);\n    await signInWithPhoneNumber(auth, phone, recaptcha);\n  };\n\n  const verifyOTP = async (code: string) => {\n    // OTP verification logic here (requires confirmation result from signInWithPhone)\n  };\n\n  const logout = async () => {\n    await auth.signOut();\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, signInWithGoogle, signInWithPhone, verifyOTP, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n",
			      "src/components/auth/Login.tsx": "// Login component with Firebase authentication options\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useTheme } from '../../contexts/ThemeContext';\n\nconst Login: React.FC = () => {\n  const { signInWithGoogle, signInWithPhone } = useAuth();\n  const { theme } = useTheme();\n  const navigate = useNavigate();\n  const [phone, setPhone] = useState('');\n\n  const handleGoogleSignIn = async () => {\n    await signInWithGoogle();\n    navigate('/dashboard');\n  };\n\n  const handlePhoneSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await signInWithPhone(phone);\n    navigate('/otp');\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900\">\n      <div className=\"card max-w-md w-full\">\n        <h2 className=\"text-2xl font-bold text-center mb-6\">Sign In</h2>\n        <button onClick={handleGoogleSignIn} className=\"btn-primary w-full mb-4\">\n          Sign in with Google\n        </button>\n        <form onSubmit={handlePhoneSignIn}>\n          <input\n            type=\"tel\"\n            value={phone}\n            onChange={(e) => setPhone(e.target.value)}\n            placeholder=\"Enter phone number\"\n            className=\"w-full p-2 mb-4 border rounded-lg dark:bg-gray-700 dark:text-white\"\n          />\n          <div id=\"recaptcha-container\"></div>\n          <button type=\"submit\" className=\"btn-primary w-full\">\n            Send OTP\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n",
			          "src/components/auth/OTPInput.tsx": "// OTP input component with responsive styling\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useTheme } from '../../contexts/ThemeContext';\n\nconst OTPInput: React.FC = () => {\n  const { verifyOTP } = useAuth();\n  const { theme } = useTheme();\n  const navigate = useNavigate();\n  const [otp, setOtp] = useState(['', '', '', '', '', '']);\n\n  const handleChange = (index: number, value: string) => {\n    if (/^[0-9]?$/.test(value)) {\n      const newOtp = [...otp];\n      newOtp[index] = value;\n      setOtp(newOtp);\n      if (value && index < 5) {\n        document.getElementById(`otp-${index + 1}`)?.focus();\n      }\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const code = otp.join('');\n    await verifyOTP(code);\n    navigate('/dashboard');\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 dark:bg-gray-900\">\n      <div className=\"card max-w-md w-full\">\n        <h2 className=\"text-2xl font-bold text-center mb-6\">Enter OTP</h2>\n        <form onSubmit={handleSubmit} className=\"flex flex-col items-center\">\n          <div className=\"flex space-x-2 mb-6\">\n            {otp.map((digit, index) => (\n              <input\n                key={index}\n                id={`otp-${index}`}\n                type=\"text\"\n                maxLength={1}\n                value={digit}\n                onChange={(e) => handleChange(index, e.target.value)}\n                className=\"w-12 h-12 text-center text-xl border rounded-lg dark:bg-gray-700 dark:text-white focus:ring-2 focus:ring-[var(--primary-orange)]\"\n              />\n            ))}\n          </div>\n          <button type=\"submit\" className=\"btn-primary\">\n            Verify OTP\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default OTPInput;\n",
				      "src/components/auth/ProtectedRoute.tsx": "// Protected route component to restrict access\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext';\n\nconst ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  return user ? <>{children}</> : <Navigate to=\"/login\" />;\n};\n\nexport default ProtectedRoute;\n",
				          "src/components/layout/Navbar.tsx": "// Navbar component with theme toggle and logout\nimport React from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { useTheme } from '../../contexts/ThemeContext';\nimport { useNavigate } from 'react-router-dom';\n\nconst Navbar: React.FC = () => {\n  const { user, logout } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n  const navigate = useNavigate();\n\n  const handleLogout = async () => {\n    await logout();\n    navigate('/login');\n  };\n\n  return (\n    <nav className=\"bg-[var(--primary-orange)] dark:bg-gray-800 p-4 flex justify-between items-center\">\n      <h1 className=\"text-white text-xl font-bold\">File Manager</h1>\n      {user && (\n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={toggleTheme}\n            className=\"text-white hover:bg-[var(--primary-orange-dark)] p-2 rounded-full\"\n          >\n            {theme === 'light' ? '🌙' : '☀️'}\n          </button>\n          <button onClick={handleLogout} className=\"btn-primary\">\n            Logout\n          </button>\n        </div>\n      )}\n    </nav>\n  );\n};\n\nexport default Navbar;\n",
					      "src/components/files/FileDashboard.tsx": "// File dashboard component with Google Drive integration\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport FileCard from './FileCard';\nimport FileUpload from './FileUpload';\n\ninterface File {\n  id: string;\n  name: string;\n  type: string;\n  url: string;\n  category: string;\n}\n\nconst FileDashboard: React.FC = () => {\n  const { user } = useAuth();\n  const [files, setFiles] = useState<File[]>([]);\n  const [category, setCategory] = useState<string>('Images');\n\n  // Placeholder Google Apps Script URL\n  const GOOGLE_APPS_SCRIPT_URL = 'YOUR_GOOGLE_APPS_SCRIPT_URL';\n\n  useEffect(() => {\n    const fetchFiles = async () => {\n      try {\n        const response = await fetch(`${GOOGLE_APPS_SCRIPT_URL}?category=${category}`, {\n          headers: { Authorization: `Bearer ${user.accessToken}` },\n        });\n        const data = await response.json();\n        setFiles(data.files);\n      } catch (error) {\n        console.error('Error fetching files:', error);\n      }\n    };\n    if (user) fetchFiles();\n  }, [user, category]);\n\n  const handleUpload = async (file: File, category: string) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('category', category);\n\n    try {\n      await fetch(GOOGLE_APPS_SCRIPT_URL, {\n        method: 'POST',\n        body: formData,\n        headers: { Authorization: `Bearer ${user.accessToken}` },\n      });\n      // Refresh files\n      const response = await fetch(`${GOOGLE_APPS_SCRIPT_URL}?category=${category}`);\n      const data = await response.json();\n      setFiles(data.files);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-2xl font-bold\">Your Files</h2>\n        <select\n          value={category}\n          onChange={(e) => setCategory(e.target.value)}\n          className=\"p-2 border rounded-lg dark:bg-gray-700 dark:text-white\"\n        >\n          <option>Images</option>\n          <option>Videos</option>\n          <option>Docs</option>\n        </select>\n      </div>\n      <FileUpload onUpload={handleUpload} />\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n        {files.map((file) => (\n          <FileCard key={file.id} file={file} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default FileDashboard;\n",
					          "src/components/files/FileCard.tsx": "// File card component for displaying files\nimport React from 'react';\n\ninterface File {\n  id: string;\n  name: string;\n  type: string;\n  url: string;\n  category: string;\n}\n\ninterface FileCardProps {\n  file: File;\n}\n\nconst FileCard: React.FC<FileCardProps> = ({ file }) => {\n  const isImage = file.type.startsWith('image/');\n  const isVideo = file.type.startsWith('video/');\n  const isDoc = file.type.includes('pdf') || file.type.includes('document');\n\n  return (\n    <div className=\"card\">\n      {isImage && <img src={file.url} alt={file.name} className=\"w-full h-32 object-cover rounded-t-xl\" />}\n      {isVideo && (\n        <video controls className=\"w-full h-32 object-cover rounded-t-xl\">\n          <source src={file.url} type={file.type} />\n        </video>\n      )}\n      {isDoc && (\n        <iframe src={file.url} title={file.name} className=\"w-full h-32 rounded-t-xl\"></iframe>\n      )}\n      <div className=\"p-2\">\n        <h3 className=\"text-lg font-semibold truncate}>{file.name}</h3>\n        <p className=\"text-sm text-gray-500 dark:text-gray-400}>{file.category}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default FileCard;\n",
						      "src/components/files/FileUpload.tsx": "// File upload component\nimport React, { useState } from 'react';\n\ninterface FileUploadProps {\n  onUpload: (file: File, category: string) => void;\n}\n\nconst FileUpload: React.FC<FileUploadProps> = ({ onUpload }) => {\n  const [file, setFile] = useState<File | null>(null);\n  const [category, setCategory] = useState<string>('Images');\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (file) {\n      onUpload(file, category);\n      setFile(null);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"mb-6\">\n      <div className=\"flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4\">\n        <input\n          type=\"file\"\n          onChange={(e) => setFile(e.target.files?.[0] || null)}\n          className=\"p-2 border rounded-lg dark:bg-gray-700 dark:text-white\"\n        />\n        <select\n          value={category}\n          onChange={(e) => setCategory(e.target.value)}\n          className=\"p-2 border rounded-lg dark:bg-gray-700 dark:text-white\"\n        >\n          <option>Images</option>\n          <option>Videos</option>\n          <option>Docs</option>\n        </select>\n        <button type=\"submit\" className=\"btn-primary\" disabled={!file}>\n          Upload\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default FileUpload;\n",
						          "package.json": "{\n  \"name\": \"file-management-app\",\n  \"version\": \"1.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc && vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-router-dom\": \"^6.16.0\",\n    \"firebase\": \"^9.17.1\",\n    \"@types/react\": \"^18.2.0\",\n    \"@types/react-dom\": \"^18.2.0\",\n    \"typescript\": \"^4.9.5\"\n  },\n  \"devDependencies\": {\n    \"vite\": \"^4.1.4\",\n    \"tailwindcss\": \"^3.2.7\",\n    \"@vitejs/plugin-react\": \"^3.1.0\"\n  }\n}\n",
							      "vite.config.ts": "// Vite configuration for Vercel deployment\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  plugins: [react()],\n  build: {\n    outDir: 'dist',\n  },\n});\n",
							          "tailwind.config.js": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: ['./src/**/*.{html,js,tsx}'],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          orange: '#f97316',\n          'orange-dark': '#ea580c',\n        },\n      },\n    },\n  },\n  plugins: [],\n};\n",
								      "vercel.json": "{\n  \"rewrites\": [\n    {\n      \"source\": \"/(.*)\",\n      \"destination\": \"/index.html\"\n    }\n  ]\n}\n",
								          "README.md": "# File Management App\n\nA modern, responsive web application built with React, TypeScript, and Tailwind CSS, featuring Firebase Authentication and Google Drive file storage.\n\n## Setup Instructions\n\n1. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n2. **Configure Firebase**:\n   - Replace the `firebaseConfig` object in `src/contexts/AuthContext.tsx` with your Firebase project credentials.\n\n3. **Configure Google Apps Script**:\n   - Deploy a Google Apps Script to handle Google Drive file operations.\n   - Replace `YOUR_GOOGLE_APPS_SCRIPT_URL` in `src/components/files/FileDashboard.tsx` with your script's URL.\n\n4. **Run Locally**:\n   ```bash\n   npm run dev\n   ```\n\n5. **Deploy to Vercel**:\n   - Push the code to a GitHub repository.\n   - Connect the repository to Vercel and deploy.\n\n## Project Structure\n- `src/`: Contains all source code\n  - `components/`: Reusable React components\n  - `contexts/`: Context providers for theme and authentication\n  - `index.tsx`: Main entry point\n  - `index.css`: Global styles with Tailwind\n- `package.json`: Project dependencies and scripts\n- `vite.config.ts`: Vite configuration for development and build\n- `tailwind.config.js`: Tailwind CSS configuration\n- `vercel.json`: Vercel deployment configuration\n\n## Features\n- Firebase Authentication (Google Sign-In, Phone OTP)\n- Google Drive file storage and categorization\n- Responsive design with dark/light mode toggle\n- File previews for images, videos, and documents\n- Modern UI with Tailwind CSS\n"
									    }
									    }
